plugins{
    alias(libs.plugins.firebase.crashlitycs)
    //alias(libs.plugins.compose.compiler)
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}

android {
    def majorVersion = 3
    def minorVersion = 3

    testOptions.unitTests.includeAndroidResources true
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = 17
    }
    defaultConfig {
        applicationId "se.barsk.park"
        minSdkVersion 23
        compileSdkVersion 36
        targetSdkVersion 36
        versionCode 10
        versionName "$majorVersion.$minorVersion"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "boolean", "releaseBuild", "false"
        buildConfigField "int", "initialParkedCars", "0"
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "releaseBuild", "true"
        }
        mock_6 {
            buildConfigField "int", "initialParkedCars", "6"
            signingConfig signingConfigs.debug
            debuggable true
        }
        mock_5 {
            buildConfigField "int", "initialParkedCars", "5"
            signingConfig signingConfigs.debug
            debuggable true
        }
        mock_4 {
            buildConfigField "int", "initialParkedCars", "4"
            signingConfig signingConfigs.debug
            debuggable true
        }
        mock_3 {
            buildConfigField "int", "initialParkedCars", "3"
            signingConfig signingConfigs.debug
            debuggable true
        }
        mock_2 {
            buildConfigField "int", "initialParkedCars", "2"
            signingConfig signingConfigs.debug
            debuggable true
        }
        mock_1 {
            buildConfigField "int", "initialParkedCars", "1"
            signingConfig signingConfigs.debug
            debuggable true
        }
        mock_0 {
            buildConfigField "int", "initialParkedCars", "0"
            signingConfig signingConfigs.debug
            debuggable true
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }

    flavorDimensions "build"
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
            dimension "build"
        }
        prod {
            dimension "build"
        }
    }

    // Remove mockRelease and prodMock_* as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        } else if (variant.buildType.name.startsWith("mock")
                && variant.getFlavors().get(0).name == "prod") {
            variant.setIgnore(true)
        }
    }

    configurations.configureEach {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
    }
    namespace 'se.barsk.park'
}

dependencies {
    // Import the BoM for the Firebase platform
    implementation platform(libs.firebase.bom)
    // Declare the dependencies for the desired Firebase products without specifying versions
    implementation libs.firebase.crashlytics

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.kotlin.stdlib.jdk7
    implementation libs.appcompat
    implementation libs.constraintlayout
    implementation libs.preference.ktx
    implementation libs.swiperefreshlayout
    implementation libs.material
    implementation libs.play.services.auth
    implementation libs.fuel.android
    implementation libs.fuel.json
    implementation libs.result
    implementation libs.licensesdialog
    implementation libs.android.joda
    implementation libs.kotlinx.coroutines.android
    testImplementation libs.core
    testImplementation libs.junit
    testImplementation libs.json
    testImplementation libs.kotlin.reflect
    testImplementation libs.robolectric
    testImplementation libs.kluent.android
}

